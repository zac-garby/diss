- The naive implementation of just instantiating a fresh name for each hole doesn't work.
  - Because, look at the term =let f = ? in f 1.= The hole should have a type of =int -> c= for all =c=
  - The inference rule for /let/ will generalise the type it's inferred for /f/, namely /a/ (a fresh variable for the hole)
  - The generalisation of /a/ is /âˆ€ a . a/.
  - Then, when the type of /f/ is inferred in the application /f 1/, it's instantiated, giving a new fresh variable, /b/
  - This application gives the constraint  =b ~ int \rightarrow  c=.
- Clearly, there's nothing that can be written in =infer (Hole n) = ...= to make this work
  - Instead, all the holes must be discovered before type-checking, and then can be added as a monomorphic
  type to the environment
  - Holes are similar to abstractions, in that:
	   /a b ? c/     is similar to     /\hole -> a b hole c/
  - That's why this approach works better, but the previous approach doesn't because it's more like /let/ (where types are generalised where possible.)
  - Now /infer (Hole n)/ is very similar to /infer (Var x)/.
- There is still an issue with this approach, though.
  - Take =let f = ? 1 in f= again, which still doesn't work.
  - In the =let= definition, the type of =f= is inferred to be some new type, say =c=. This is a monotype, since it came from =infer=, however it is then generalised by definition of =let=, yielding =\forall c . c=.
  - In the =let= body, the type of =f=, namely =\forall c . c=, is instantiated, giving a new type =d=.
  - The hole, however, still expects to be of type =Int \rightarrow b=, but this is no longer the case - it should produce a =c=.
- Clearly, a specific type for a hole needs to exist. This is the approach taken by most literature, e.g. [[https://pper.github.io/type_hole_inference.pdf]]
 
