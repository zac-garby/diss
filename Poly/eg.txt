id x = x.

swap f x y = f y x.

const x y = x.

not b = if b then False else True.

fac n = if eq n 0
	    then 1
		else mul n (fac (sub n 1)).

fib n = if eq n 0
        then 1
		else if eq n 1
		  then 1
		  else add (fib (sub n 1)) (fib (sub n 2)).

fix f = f (fix f).

append xs ys =
  if null xs
  then ys
  else cons (head xs) (append (tail xs) ys).

rev-aux xs acc =
  if null xs
  then acc
  else rev-aux (tail xs) (cons (head xs) acc).
  
rev xs = rev-aux xs [].

take n xs =
  if eq n 0
  then []
  else cons (head xs) (take (sub n 1) (tail xs)).

drop n xs =
  if eq n 0
  then xs
  else drop (sub n 1) (tail xs).

seq n = cons n (seq (add n 1)).

range m n =
  if eq m n
  then [m]
  else cons m (range (add m 1) n).

map f xs =
  if null xs
  then []
  else cons (f (head xs)) (map f (tail xs)).

foldr f z xs =
  if null xs
  then z
  else f (head xs) (foldr f z (tail xs)).

length xs =
  if null xs
  then 0
  else add 1 (length (tail xs)).
