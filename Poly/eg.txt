id x = x.

swap f x y = f y x.

const x y = x.

not b = if b then False else True.

fac n = if n == 0
	    then 1
		else n * fac (n - 1).

fib n = if n == 0
        then 1
		else if n == 1
		  then 1
		  else fib (n - 1) + fib (n - 2).

fix f = f (fix f).

append xs ys =
  if null xs
  then ys
  else head xs :: append (tail xs) ys.

__app = append.

rev-aux xs acc =
  if null xs
  then acc
  else rev-aux (tail xs) (head xs :: acc).
  
rev xs = rev-aux xs [].

take n xs =
  if n == 0
  then []
  else head xs :: take (n - 1) (tail xs).

drop n xs =
  if n == 0
  then xs
  else drop (n - 1) (tail xs).

seq n = n :: seq (n + 1).

range m n =
  if m == n
  then [m]
  else m :: range (m + 1) n.

map f xs =
  if null xs
  then []
  else f (head xs) :: map f (tail xs).

foldr f z xs =
  if null xs
  then z
  else f (head xs) (foldr f z (tail xs)).

length xs =
  if null xs
  then 0
  else 1 + length (tail xs).
