id x = x.

swap f x y = f y x.

const x y = x.

not b = if b then False else True.

fac n = if eq n 0
	    then 1
		else mul n (fac (sub n 1)).

fib n = if eq n 0
        then 1
		else if eq n 1
		  then 1
		  else add (fib (sub n 1)) (fib (sub n 2)).

fix f = f (fix f).

append xs ys =
  if null xs
  then ys
  else (head xs) :: (append (tail xs) ys).

rev-aux xs acc =
  if null xs
  then acc
  else rev-aux (tail xs) ((head xs) :: acc).
  
rev xs = rev-aux xs [].

take n xs =
  if eq n 0
  then []
  else (head xs) :: (take (sub n 1) (tail xs)).

seq n = n :: seq (add n 1).
