* Potential areas to explore / things to implement
** Simultaneous equations in files
** Pattern matching
** User-defined data types
** AST editing directly/interactive hole filling
** User-defined infix operators?
** Modules/environment levels
** Error context (e.g. "error in the definition of 'id'")
** Lazy evaluation
** Better searching
*** e.g. =:s a -> b :from prelude.txt= - could search for specific files
*** e.g. =:s zip= - could also search for function names
* Bug!
  #+begin_src
\xs -> let hd = head xs in hd
  #+end_src
  Fixed - needed to =sub s= to the env when generalising the type for a let expression.

  Simple syntax & semantics compared to GHC, nice as an embedded language for example. Also pure.

  Nice example for fitting: =sortOn (comparing ?) ["Hello", "world"]=
* Rigid & non-rigid variables
  e.g. =zipWith ? [1, 2] [3, 4]= doesn't suggest =(+)= because it wants to be of type =a=.
