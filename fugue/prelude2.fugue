data List a = Nil | Cons a (List a);

data Maybe a = Nothing | Just a;

data Bool = True | False;

(.) : (b -> c) -> (a -> b) -> a -> c;
(.) f g x = f (g x);

($) : (a -> b) -> a -> b;
($) f x = f x;

id : a -> a;
id x = x;

not : Bool -> Bool;
not b = case b of
  True -> False,
  False -> True;

(=/=) : a -> a -> Bool;
(=/=) x y = not (x == y);

flip : (a -> b -> c) -> b -> a -> c;
flip f x y = f y x;

const : a -> b -> a;
const x y = x;

(&&) : Bool -> Bool -> Bool;
(&&) x y = if x then y else False;

(||) : Bool -> Bool -> Bool;
(||) x y = if x then True else y;

curry : ((a, b) -> c) -> a -> b -> c;
curry f x y = f (x, y);

uncurry : (a -> b -> c) -> (a, b) -> c;
uncurry f p = f (fst p) (snd p);

neg : Int -> Int;
neg x = x * -1;

max : Int -> Int -> Int;
max x y = if x > y then x else y;

min : Int -> Int -> Int;
min x y = if x < y then x else y;

succ : Int -> Int;
succ x = x + 1;

pred : Int -> Int;
pred x = x - 1;

abs : Int -> Int;
abs x = if x < 0 then neg x else x;

sign : Int -> Int;
sign x = if x < 0
         then -1
         else if x > 0
              then 1
              else 0;

even : Int -> Bool;
even x = x % 2 == 0;

odd : Int -> Bool;
odd x = x % 2 =/= 0;

head : List a -> Maybe a;
head xs = case xs of
  Nil -> Nothing,
  Cons x xs -> Just x;

tail : List a -> Maybe (List a);
tail xs = case xs of
  Nil -> Nothing,
  Cons x xs -> Just xs;

null : List a -> Bool;
null xs = case xs of
  Nil -> True,
  Cons x xs -> False;

(++) : List a -> List a -> List a;
(++) xs ys = case xs of
  Nil -> ys,
  Cons x xs -> x :: (xs ++ ys);  

(!) : List a -> Int -> Maybe a;
(!) xs i = case xs of
  Nil -> Nothing,
  Cons x xs -> if i == 0 then
  	   	 	     Just x
			   else
			     xs ! (i - 1);

reverse : List a -> List a;
reverse xs =
  let rec rev-aux xs acc = case xs of
    Nil -> acc,
	Cons x xs -> rev-aux xs (x :: acc)
  in rev-aux xs [];

take : Int -> List a -> List a;
take n xs = case xs of
  Nil -> Nil,
  Cons x xs' -> if n == 0 then
                  Nil
				else
				  x :: take (n - 1) xs';
