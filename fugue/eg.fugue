data List a = Nil | Cons a (List a);

data Tree a = Leaf a | Node (Tree a) (Tree a);

data Bool = T | F;

fac n = if n == 0
	    then 1
		else n * fac (n - 1);

fib n = if n == 0
        then 1
		else if n == 1
		  then 1
		  else fib (n - 1) + fib (n - 2);
  
dot = ((.) . (.)) sum (zipWith (*));

sortOn lte xs =
  if null xs
  then []
  else let hd = head xs in
  	   let tl = tail xs in
	   let left = filter (\x -> lte x hd) tl in
	   let right = filter (\x -> not (lte x hd)) tl in
	   sortOn lte left ++ [hd] ++ sortOn lte right;

sort = sortOn (<=);

lexicographic : [Char] -> [Char] -> Bool;
lexicographic xs ys =
  if null xs
  then True
  else if null ys
  	   then False
	   else let x = ord (head xs) in
	   		let y = ord (head ys) in
			if x < y
			then True
			else if y < x
				 then False
				 else lexicographic (tail xs) (tail ys);
				 